{"version":3,"file":"Dashboard.e5e2829a.js","sources":["../../src/components/ftbot/BotComparisonList.vue","../../src/components/ftbot/BotComparisonList.vue?vue&type=template&lang.js","../../src/views/Dashboard.vue","../../src/views/Dashboard.vue?vue&type=template&lang.js"],"sourcesContent":["<template>\n  <b-table\n    ref=\"tradesTable\"\n    small\n    hover\n    show-empty\n    primary-key=\"botId\"\n    :items=\"tableItems\"\n    :fields=\"tableFields\"\n  >\n    <template #cell(botName)=\"row\">\n      <div class=\"d-flex flex-row\">\n        <b-form-checkbox\n          v-if=\"row.item.botId && botStore.botCount > 1\"\n          v-model=\"botStore.botStores[row.item.botId].isSelected\"\n          title=\"Show bot in Dashboard\"\n        />\n        <span>{{ row.value }}</span>\n      </div>\n    </template>\n    <template #cell(profitOpen)=\"row\">\n      <profit-pill\n        v-if=\"row.item.profitOpen && row.item.botId != 'Summary'\"\n        :profit-ratio=\"row.item.profitOpenRatio\"\n        :profit-abs=\"row.item.profitOpen\"\n        :stake-currency=\"row.item.stakeCurrency\"\n      />\n    </template>\n    <template #cell(profitClosed)=\"row\">\n      <profit-pill\n        v-if=\"row.item.profitClosed && row.item.botId != 'Summary'\"\n        :profit-ratio=\"row.item.profitClosedRatio\"\n        :profit-abs=\"row.item.profitClosed\"\n        :stake-currency=\"row.item.stakeCurrency\"\n      />\n    </template>\n\n    <template #cell(balance)=\"row\">\n      <div v-if=\"row.item.balance\">\n        <span :title=\"row.item.stakeCurrency\"\n          >{{ formatPrice(row.item.balance, row.item.stakeCurrencyDecimals) }}\n        </span>\n        <span clas=\"text-small\">{{ row.item.stakeCurrency }}</span>\n      </div>\n    </template>\n    <template #cell(winVsLoss)=\"row\">\n      <div v-if=\"row.item.losses !== undefined\">\n        <span class=\"text-profit\">{{ row.item.wins }}</span> /\n        <span class=\"text-loss\">{{ row.item.losses }}</span>\n      </div>\n    </template>\n  </b-table>\n</template>\n\n<script lang=\"ts\">\nimport ProfitPill from '@/components/general/ProfitPill.vue';\nimport { formatPrice } from '@/shared/formatters';\nimport { defineComponent, computed } from '@vue/composition-api';\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { ProfitInterface, ComparisonTableItems } from '@/types';\n\nexport default defineComponent({\n  name: 'BotComparisonList',\n  components: { ProfitPill },\n  setup() {\n    const botStore = useBotStore();\n\n    const tableFields: Record<string, string | Function>[] = [\n      { key: 'botName', label: 'Bot' },\n      { key: 'trades', label: 'Trades' },\n      { key: 'profitOpen', label: 'Open Profit' },\n      { key: 'profitClosed', label: 'Closed Profit' },\n      { key: 'balance', label: 'Balance' },\n      { key: 'winVsLoss', label: 'W/L' },\n    ];\n\n    const tableItems = computed(() => {\n      const val: ComparisonTableItems[] = [];\n      const summary: ComparisonTableItems = {\n        botId: undefined,\n        botName: 'Summary',\n        profitClosed: 0,\n        profitClosedRatio: undefined,\n        profitOpen: 0,\n        profitOpenRatio: undefined,\n        stakeCurrency: 'USDT',\n        wins: 0,\n        losses: 0,\n      };\n\n      Object.entries(botStore.allProfit).forEach(([k, v]: [k: string, v: ProfitInterface]) => {\n        const allStakes = botStore.allOpenTrades[k].reduce((a, b) => a + b.stake_amount, 0);\n        const profitOpenRatio =\n          botStore.allOpenTrades[k].reduce((a, b) => a + b.profit_ratio * b.stake_amount, 0) /\n          allStakes;\n        const profitOpen = botStore.allOpenTrades[k].reduce((a, b) => a + (b.profit_abs ?? 0), 0);\n\n        // TODO: handle one inactive bot ...\n        val.push({\n          botId: k,\n          botName: botStore.availableBots[k].botName,\n          trades: `${botStore.allOpenTradeCount[k]} / ${\n            botStore.allBotState[k]?.max_open_trades || 'N/A'\n          }`,\n          profitClosed: v.profit_closed_coin,\n          profitClosedRatio: v.profit_closed_ratio || 0,\n          stakeCurrency: botStore.allBotState[k]?.stake_currency || '',\n          profitOpenRatio,\n          profitOpen,\n          wins: v.winning_trades,\n          losses: v.losing_trades,\n          balance: botStore.allBalance[k]?.total,\n          stakeCurrencyDecimals: botStore.allBotState[k]?.stake_currency_decimals || 3,\n        });\n        if (v.profit_closed_coin !== undefined) {\n          summary.profitClosed += v.profit_closed_coin;\n          summary.profitOpen += v.profit_all_coin;\n          summary.wins += v.winning_trades;\n          summary.losses += v.losing_trades;\n          // summary.decimals = this.allBotState[k]?.stake_currency_decimals || summary.decimals;\n        }\n      });\n      val.push(summary);\n      return val;\n    });\n\n    return {\n      formatPrice,\n      tableFields,\n      tableItems,\n      botStore,\n    };\n  },\n});\n</script>\n\n<style scoped></style>\n","\n<b-table\n  ref=\"tradesTable\"\n  small\n  hover\n  show-empty\n  primary-key=\"botId\"\n  :items=\"tableItems\"\n  :fields=\"tableFields\"\n>\n  <template #cell(botName)=\"row\">\n    <div class=\"d-flex flex-row\">\n      <b-form-checkbox\n        v-if=\"row.item.botId && botStore.botCount > 1\"\n        v-model=\"botStore.botStores[row.item.botId].isSelected\"\n        title=\"Show bot in Dashboard\"\n      />\n      <span>{{ row.value }}</span>\n    </div>\n  </template>\n  <template #cell(profitOpen)=\"row\">\n    <profit-pill\n      v-if=\"row.item.profitOpen && row.item.botId != 'Summary'\"\n      :profit-ratio=\"row.item.profitOpenRatio\"\n      :profit-abs=\"row.item.profitOpen\"\n      :stake-currency=\"row.item.stakeCurrency\"\n    />\n  </template>\n  <template #cell(profitClosed)=\"row\">\n    <profit-pill\n      v-if=\"row.item.profitClosed && row.item.botId != 'Summary'\"\n      :profit-ratio=\"row.item.profitClosedRatio\"\n      :profit-abs=\"row.item.profitClosed\"\n      :stake-currency=\"row.item.stakeCurrency\"\n    />\n  </template>\n\n  <template #cell(balance)=\"row\">\n    <div v-if=\"row.item.balance\">\n      <span :title=\"row.item.stakeCurrency\"\n        >{{ formatPrice(row.item.balance, row.item.stakeCurrencyDecimals) }}\n      </span>\n      <span clas=\"text-small\">{{ row.item.stakeCurrency }}</span>\n    </div>\n  </template>\n  <template #cell(winVsLoss)=\"row\">\n    <div v-if=\"row.item.losses !== undefined\">\n      <span class=\"text-profit\">{{ row.item.wins }}</span> /\n      <span class=\"text-loss\">{{ row.item.losses }}</span>\n    </div>\n  </template>\n</b-table>\n","<template>\n  <GridLayout\n    class=\"h-100 w-100\"\n    :row-height=\"50\"\n    :layout=\"gridLayout\"\n    :vertical-compact=\"false\"\n    :margin=\"[5, 5]\"\n    :responsive-layouts=\"responsiveGridLayouts\"\n    :is-resizable=\"!isLayoutLocked\"\n    :is-draggable=\"!isLayoutLocked\"\n    :responsive=\"true\"\n    :prevent-collision=\"true\"\n    :cols=\"{ lg: 12, md: 12, sm: 12, xs: 4, xxs: 2 }\"\n    @layout-updated=\"layoutUpdatedEvent\"\n    @breakpoint-changed=\"breakpointChanged\"\n  >\n    <GridItem\n      :i=\"gridLayoutDaily.i\"\n      :x=\"gridLayoutDaily.x\"\n      :y=\"gridLayoutDaily.y\"\n      :w=\"gridLayoutDaily.w\"\n      :h=\"gridLayoutDaily.h\"\n      :min-w=\"3\"\n      :min-h=\"4\"\n      drag-allow-from=\".drag-header\"\n    >\n      <DraggableContainer :header=\"`Daily Profit ${botStore.botCount > 1 ? 'combined' : ''}`\">\n        <DailyChart\n          v-if=\"botStore.allDailyStatsSelectedBots\"\n          :daily-stats=\"botStore.allDailyStatsSelectedBots\"\n          :show-title=\"false\"\n        />\n      </DraggableContainer>\n    </GridItem>\n    <GridItem\n      :i=\"gridLayoutBotComparison.i\"\n      :x=\"gridLayoutBotComparison.x\"\n      :y=\"gridLayoutBotComparison.y\"\n      :w=\"gridLayoutBotComparison.w\"\n      :h=\"gridLayoutBotComparison.h\"\n      :min-w=\"3\"\n      :min-h=\"4\"\n      drag-allow-from=\".drag-header\"\n    >\n      <DraggableContainer header=\"Bot comparison\">\n        <bot-comparison-list />\n      </DraggableContainer>\n    </GridItem>\n    <GridItem\n      :i=\"gridLayoutAllOpenTrades.i\"\n      :x=\"gridLayoutAllOpenTrades.x\"\n      :y=\"gridLayoutAllOpenTrades.y\"\n      :w=\"gridLayoutAllOpenTrades.w\"\n      :h=\"gridLayoutAllOpenTrades.h\"\n      :min-w=\"3\"\n      :min-h=\"4\"\n      drag-allow-from=\".drag-header\"\n    >\n      <DraggableContainer header=\"Open Trades\">\n        <trade-list\n          :active-trades=\"true\"\n          :trades=\"botStore.allOpenTradesSelectedBots\"\n          multi-bot-view\n        />\n      </DraggableContainer>\n    </GridItem>\n    <GridItem\n      :i=\"gridLayoutCumChart.i\"\n      :x=\"gridLayoutCumChart.x\"\n      :y=\"gridLayoutCumChart.y\"\n      :w=\"gridLayoutCumChart.w\"\n      :h=\"gridLayoutCumChart.h\"\n      :min-w=\"3\"\n      :min-h=\"4\"\n      drag-allow-from=\".drag-header\"\n    >\n      <DraggableContainer header=\"Cumulative Profit\">\n        <CumProfitChart :trades=\"botStore.allTradesSelectedBots\" :show-title=\"false\" />\n      </DraggableContainer>\n    </GridItem>\n    <GridItem\n      :i=\"gridLayoutTradesLogChart.i\"\n      :x=\"gridLayoutTradesLogChart.x\"\n      :y=\"gridLayoutTradesLogChart.y\"\n      :w=\"gridLayoutTradesLogChart.w\"\n      :h=\"gridLayoutTradesLogChart.h\"\n      :min-w=\"3\"\n      :min-h=\"4\"\n      drag-allow-from=\".drag-header\"\n    >\n      <DraggableContainer header=\"Trades Log\">\n        <TradesLogChart :trades=\"botStore.allTradesSelectedBots\" :show-title=\"false\" />\n      </DraggableContainer>\n    </GridItem>\n  </GridLayout>\n</template>\n\n<script lang=\"ts\">\nimport { formatPrice } from '@/shared/formatters';\n\nimport { GridLayout, GridItem, GridItemData } from 'vue-grid-layout';\n\nimport DailyChart from '@/components/charts/DailyChart.vue';\nimport CumProfitChart from '@/components/charts/CumProfitChart.vue';\nimport TradesLogChart from '@/components/charts/TradesLog.vue';\nimport BotComparisonList from '@/components/ftbot/BotComparisonList.vue';\nimport TradeList from '@/components/ftbot/TradeList.vue';\nimport DraggableContainer from '@/components/layout/DraggableContainer.vue';\n\nimport { defineComponent, ref, computed, onMounted } from '@vue/composition-api';\nimport { DashboardLayout, findGridLayout, useLayoutStore } from '@/stores/layout';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nexport default defineComponent({\n  name: 'Dashboard',\n  components: {\n    GridLayout,\n    GridItem,\n    DailyChart,\n    CumProfitChart,\n    TradesLogChart,\n    BotComparisonList,\n    TradeList,\n    DraggableContainer,\n  },\n  setup() {\n    const botStore = useBotStore();\n\n    const layoutStore = useLayoutStore();\n    const currentBreakpoint = ref('');\n\n    const breakpointChanged = (newBreakpoint) => {\n      //   // console.log('breakpoint:', newBreakpoint);\n      currentBreakpoint.value = newBreakpoint;\n    };\n    const isResizableLayout = computed(() =>\n      ['', 'sm', 'md', 'lg', 'xl'].includes(currentBreakpoint.value),\n    );\n    const isLayoutLocked = computed(() => {\n      return layoutStore.layoutLocked || !isResizableLayout;\n    });\n\n    const gridLayout = computed((): GridItemData[] => {\n      if (isResizableLayout) {\n        return layoutStore.dashboardLayout;\n      }\n      return [...layoutStore.getDashboardLayoutSm];\n    });\n\n    const layoutUpdatedEvent = (newLayout) => {\n      if (isResizableLayout) {\n        console.log('newlayout', newLayout);\n        console.log('saving dashboard');\n        layoutStore.dashboardLayout = newLayout;\n      }\n    };\n\n    const gridLayoutDaily = computed((): GridItemData => {\n      return findGridLayout(gridLayout.value, DashboardLayout.dailyChart);\n    });\n\n    const gridLayoutBotComparison = computed((): GridItemData => {\n      return findGridLayout(gridLayout.value, DashboardLayout.botComparison);\n    });\n\n    const gridLayoutAllOpenTrades = computed((): GridItemData => {\n      return findGridLayout(gridLayout.value, DashboardLayout.allOpenTrades);\n    });\n\n    const gridLayoutCumChart = computed((): GridItemData => {\n      return findGridLayout(gridLayout.value, DashboardLayout.cumChartChart);\n    });\n\n    const gridLayoutTradesLogChart = computed((): GridItemData => {\n      return findGridLayout(gridLayout.value, DashboardLayout.tradesLogChart);\n    });\n\n    const responsiveGridLayouts = computed(() => {\n      return {\n        sm: layoutStore.getDashboardLayoutSm,\n      };\n    });\n\n    onMounted(async () => {\n      await botStore.allGetDaily({ timescale: 30 });\n      // botStore.activeBot.getTrades();\n      botStore.activeBot.getOpenTrades();\n      botStore.activeBot.getProfit();\n    });\n\n    return {\n      botStore,\n      formatPrice,\n      isLayoutLocked,\n      layoutUpdatedEvent,\n      breakpointChanged,\n      gridLayout,\n      gridLayoutDaily,\n      gridLayoutBotComparison,\n      gridLayoutAllOpenTrades,\n      gridLayoutCumChart,\n      gridLayoutTradesLogChart,\n      responsiveGridLayouts,\n    };\n  },\n});\n</script>\n\n<style scoped></style>\n","\n<GridLayout\n  class=\"h-100 w-100\"\n  :row-height=\"50\"\n  :layout=\"gridLayout\"\n  :vertical-compact=\"false\"\n  :margin=\"[5, 5]\"\n  :responsive-layouts=\"responsiveGridLayouts\"\n  :is-resizable=\"!isLayoutLocked\"\n  :is-draggable=\"!isLayoutLocked\"\n  :responsive=\"true\"\n  :prevent-collision=\"true\"\n  :cols=\"{ lg: 12, md: 12, sm: 12, xs: 4, xxs: 2 }\"\n  @layout-updated=\"layoutUpdatedEvent\"\n  @breakpoint-changed=\"breakpointChanged\"\n>\n  <GridItem\n    :i=\"gridLayoutDaily.i\"\n    :x=\"gridLayoutDaily.x\"\n    :y=\"gridLayoutDaily.y\"\n    :w=\"gridLayoutDaily.w\"\n    :h=\"gridLayoutDaily.h\"\n    :min-w=\"3\"\n    :min-h=\"4\"\n    drag-allow-from=\".drag-header\"\n  >\n    <DraggableContainer :header=\"`Daily Profit ${botStore.botCount > 1 ? 'combined' : ''}`\">\n      <DailyChart\n        v-if=\"botStore.allDailyStatsSelectedBots\"\n        :daily-stats=\"botStore.allDailyStatsSelectedBots\"\n        :show-title=\"false\"\n      />\n    </DraggableContainer>\n  </GridItem>\n  <GridItem\n    :i=\"gridLayoutBotComparison.i\"\n    :x=\"gridLayoutBotComparison.x\"\n    :y=\"gridLayoutBotComparison.y\"\n    :w=\"gridLayoutBotComparison.w\"\n    :h=\"gridLayoutBotComparison.h\"\n    :min-w=\"3\"\n    :min-h=\"4\"\n    drag-allow-from=\".drag-header\"\n  >\n    <DraggableContainer header=\"Bot comparison\">\n      <bot-comparison-list />\n    </DraggableContainer>\n  </GridItem>\n  <GridItem\n    :i=\"gridLayoutAllOpenTrades.i\"\n    :x=\"gridLayoutAllOpenTrades.x\"\n    :y=\"gridLayoutAllOpenTrades.y\"\n    :w=\"gridLayoutAllOpenTrades.w\"\n    :h=\"gridLayoutAllOpenTrades.h\"\n    :min-w=\"3\"\n    :min-h=\"4\"\n    drag-allow-from=\".drag-header\"\n  >\n    <DraggableContainer header=\"Open Trades\">\n      <trade-list\n        :active-trades=\"true\"\n        :trades=\"botStore.allOpenTradesSelectedBots\"\n        multi-bot-view\n      />\n    </DraggableContainer>\n  </GridItem>\n  <GridItem\n    :i=\"gridLayoutCumChart.i\"\n    :x=\"gridLayoutCumChart.x\"\n    :y=\"gridLayoutCumChart.y\"\n    :w=\"gridLayoutCumChart.w\"\n    :h=\"gridLayoutCumChart.h\"\n    :min-w=\"3\"\n    :min-h=\"4\"\n    drag-allow-from=\".drag-header\"\n  >\n    <DraggableContainer header=\"Cumulative Profit\">\n      <CumProfitChart :trades=\"botStore.allTradesSelectedBots\" :show-title=\"false\" />\n    </DraggableContainer>\n  </GridItem>\n  <GridItem\n    :i=\"gridLayoutTradesLogChart.i\"\n    :x=\"gridLayoutTradesLogChart.x\"\n    :y=\"gridLayoutTradesLogChart.y\"\n    :w=\"gridLayoutTradesLogChart.w\"\n    :h=\"gridLayoutTradesLogChart.h\"\n    :min-w=\"3\"\n    :min-h=\"4\"\n    drag-allow-from=\".drag-header\"\n  >\n    <DraggableContainer header=\"Trades Log\">\n      <TradesLogChart :trades=\"botStore.allTradesSelectedBots\" :show-title=\"false\" />\n    </DraggableContainer>\n  </GridItem>\n</GridLayout>\n"],"names":["render","staticRenderFns","GridLayout","GridItem"],"mappings":"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"}
{"version":3,"file":"PairSummary.369a1ae1.js","sources":["../../src/components/ftbot/PairSummary.vue","../../src/components/ftbot/PairSummary.vue?vue&type=template&lang.js"],"sourcesContent":["<template>\n  <!-- <b-table class=\"table-sm\" :items=\"combinedPairList\" :fields=\"tableFields\"> </b-table> -->\n\n  <b-list-group>\n    <b-list-group-item\n      v-for=\"comb in combinedPairList\"\n      :key=\"comb.pair\"\n      button\n      class=\"d-flex justify-content-between align-items-center py-1\"\n      :active=\"comb.pair === botStore.activeBot.selectedPair\"\n      :title=\"`${comb.pair} - ${comb.tradeCount} trades`\"\n      @click=\"botStore.activeBot.selectedPair = comb.pair\"\n    >\n      <div>\n        {{ comb.pair }}\n        <span v-if=\"comb.locks\" :title=\"comb.lockReason\"> &#128274; </span>\n      </div>\n\n      <TradeProfit v-if=\"comb.trade && !backtestMode\" :trade=\"comb.trade\" />\n      <ProfitPill\n        v-if=\"backtestMode && comb.tradeCount > 0\"\n        :profit-ratio=\"comb.profit\"\n        :stake-currency=\"botStore.activeBot.stakeCurrency\"\n      />\n    </b-list-group-item>\n  </b-list-group>\n</template>\n\n<script lang=\"ts\">\nimport { formatPercent, timestampms } from '@/shared/formatters';\nimport { Lock, Trade } from '@/types';\nimport TradeProfit from '@/components/ftbot/TradeProfit.vue';\nimport ProfitPill from '@/components/general/ProfitPill.vue';\nimport { defineComponent, computed } from '@vue/composition-api';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\ninterface CombinedPairList {\n  pair: string;\n  lockReason: string;\n  profitString: string;\n  trade?: Trade;\n  locks?: Lock;\n  profit: number;\n  profitAbs: number;\n  tradeCount: number;\n}\n\nexport default defineComponent({\n  name: 'PairSummary',\n  components: { TradeProfit, ProfitPill },\n  props: {\n    // TOOD: Should be string list\n    pairlist: { required: true, type: Array as () => string[] },\n    currentLocks: { required: false, type: Array as () => Lock[], default: () => [] },\n    trades: { required: true, type: Array as () => Trade[] },\n    sortMethod: { default: 'normal', type: String },\n    backtestMode: { required: false, default: false, type: Boolean },\n  },\n  setup(props) {\n    const botStore = useBotStore();\n    const combinedPairList = computed(() => {\n      const comb: CombinedPairList[] = [];\n\n      props.pairlist.forEach((pair) => {\n        const trades: Trade[] = props.trades.filter((el) => el.pair === pair);\n        const allLocks = props.currentLocks.filter((el) => el.pair === pair);\n        let lockReason = '';\n        let locks;\n\n        // Sort to have longer timeframe in front\n        allLocks.sort((a, b) => (a.lock_end_timestamp > b.lock_end_timestamp ? -1 : 1));\n        if (allLocks.length > 0) {\n          [locks] = allLocks;\n          lockReason = `${timestampms(locks.lock_end_timestamp)} - ${locks.reason}`;\n        }\n        let profitString = '';\n        let profit = 0;\n        let profitAbs = 0;\n        trades.forEach((trade) => {\n          profit += trade.profit_ratio;\n          profitAbs += trade.profit_abs ?? 0;\n        });\n        const tradeCount = trades.length;\n        const trade = tradeCount ? trades[0] : undefined;\n        if (trades.length > 0) {\n          profitString = `Current profit: ${formatPercent(profit)}`;\n        }\n        if (trade) {\n          profitString += `\\nOpen since: ${timestampms(trade.open_timestamp)}`;\n        }\n        comb.push({ pair, trade, locks, lockReason, profitString, profit, profitAbs, tradeCount });\n      });\n      if (props.sortMethod === 'profit') {\n        comb.sort((a, b) => {\n          if (a.profit > b.profit) {\n            return -1;\n          }\n          return 1;\n        });\n      } else {\n        // sort Pairs: \"with open trade\" -> available -> locked\n        comb.sort((a, b) => {\n          if (a.trade && !b.trade) {\n            return -1;\n          }\n          if (a.trade && b.trade) {\n            // 2 open trade pairs\n            return a.trade.trade_id > b.trade.trade_id ? 1 : -1;\n          }\n          if (!a.locks && b.locks) {\n            return -1;\n          }\n          if (a.locks && b.locks) {\n            // Both have locks\n            return a.locks.lock_end_timestamp > b.locks.lock_end_timestamp ? 1 : -1;\n          }\n          return 1;\n        });\n      }\n      return comb;\n    });\n    const tableFields = computed(() => {\n      return [\n        { key: 'pair', label: 'Pair' },\n        {\n          key: 'locks.lock_end_timestamp',\n          label: 'Lock',\n          formatter: (value) => (value ? `${timestampms(value)}` : ''),\n        },\n        {\n          key: 'trade.current_profit',\n          label: 'Position',\n          formatter: (value) => formatPercent(value, 3),\n        },\n      ];\n    });\n    return {\n      combinedPairList,\n      tableFields,\n      botStore,\n    };\n  },\n});\n</script>\n\n<style scoped>\n.list-group {\n  text-align: left;\n}\n</style>\n","\n<!-- <b-table class=\"table-sm\" :items=\"combinedPairList\" :fields=\"tableFields\"> </b-table> -->\n\n<b-list-group>\n  <b-list-group-item\n    v-for=\"comb in combinedPairList\"\n    :key=\"comb.pair\"\n    button\n    class=\"d-flex justify-content-between align-items-center py-1\"\n    :active=\"comb.pair === botStore.activeBot.selectedPair\"\n    :title=\"`${comb.pair} - ${comb.tradeCount} trades`\"\n    @click=\"botStore.activeBot.selectedPair = comb.pair\"\n  >\n    <div>\n      {{ comb.pair }}\n      <span v-if=\"comb.locks\" :title=\"comb.lockReason\"> &#128274; </span>\n    </div>\n\n    <TradeProfit v-if=\"comb.trade && !backtestMode\" :trade=\"comb.trade\" />\n    <ProfitPill\n      v-if=\"backtestMode && comb.tradeCount > 0\"\n      :profit-ratio=\"comb.profit\"\n      :stake-currency=\"botStore.activeBot.stakeCurrency\"\n    />\n  </b-list-group-item>\n</b-list-group>\n"],"names":[],"mappings":"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"}
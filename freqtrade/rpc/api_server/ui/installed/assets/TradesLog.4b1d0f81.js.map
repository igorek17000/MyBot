{"version":3,"file":"TradesLog.4b1d0f81.js","sources":["../../src/components/charts/CumProfitChart.vue","../../src/components/charts/CumProfitChart.vue?vue&type=template&lang.js","../../src/components/charts/TradesLog.vue","../../src/components/charts/TradesLog.vue?vue&type=template&lang.js"],"sourcesContent":["<template>\n  <v-chart v-if=\"trades\" :option=\"chartOptions\" autoresize :theme=\"settingsStore.chartTheme\" />\n</template>\n\n<script lang=\"ts\">\nimport ECharts from 'vue-echarts';\nimport { EChartsOption } from 'echarts';\n\nimport { use } from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { LineChart, BarChart } from 'echarts/charts';\nimport {\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n} from 'echarts/components';\n\nimport { ClosedTrade, CumProfitData, CumProfitDataPerDate } from '@/types';\nimport { defineComponent, ref, computed, watch } from '@vue/composition-api';\nimport { useSettingsStore } from '@/stores/settings';\n\nuse([\n  BarChart,\n  LineChart,\n\n  CanvasRenderer,\n\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n]);\n\n// Define Column labels here to avoid typos\nconst CHART_PROFIT = 'Profit';\n\nexport default defineComponent({\n  name: 'CumProfitChart',\n  components: {\n    'v-chart': ECharts,\n  },\n  props: {\n    trades: { required: true, type: Array as () => ClosedTrade[] },\n    showTitle: { default: true, type: Boolean },\n    profitColumn: { default: 'close_profit_abs', type: String },\n  },\n  setup(props) {\n    const settingsStore = useSettingsStore();\n    const botList = ref<string[]>([]);\n    const cumulativeData = ref<{ date: number; profit: any }[]>([]);\n\n    watch(\n      () => props.trades,\n      () => {\n        botList.value = [];\n        const res: CumProfitData[] = [];\n        const resD: CumProfitDataPerDate = {};\n        const closedTrades = props.trades\n          .slice()\n          .sort((a, b) => (a.close_timestamp > b.close_timestamp ? 1 : -1));\n        let profit = 0.0;\n\n        for (let i = 0, len = closedTrades.length; i < len; i += 1) {\n          const trade = closedTrades[i];\n\n          if (trade.close_timestamp && trade[props.profitColumn]) {\n            profit += trade[props.profitColumn];\n            if (!resD[trade.close_timestamp]) {\n              // New timestamp\n              resD[trade.close_timestamp] = { profit, [trade.botId]: profit };\n            } else {\n              // Add to existing profit\n              resD[trade.close_timestamp].profit += trade[props.profitColumn];\n              if (resD[trade.close_timestamp][trade.botId]) {\n                resD[trade.close_timestamp][trade.botId] += trade[props.profitColumn];\n              } else {\n                resD[trade.close_timestamp][trade.botId] = profit;\n              }\n            }\n            // console.log(trade.close_date, profit);\n            res.push({ date: trade.close_timestamp, profit, [trade.botId]: profit });\n            if (!botList.value.includes(trade.botId)) {\n              botList.value.push(trade.botId);\n            }\n          }\n        }\n        // console.log(resD);\n\n        cumulativeData.value = Object.entries(resD).map(([k, v]) => {\n          const obj = { date: parseInt(k, 10), profit: v.profit };\n          // TODO: The below could allow \"lines\" per bot\"\n          // this.botList.forEach((botId) => {\n          // obj[botId] = v[botId];\n          // });\n          return obj;\n        });\n      },\n    );\n\n    const chartOptions = computed((): EChartsOption => {\n      const chartOptionsLoc: EChartsOption = {\n        title: {\n          text: 'Cumulative Profit',\n          show: props.showTitle,\n        },\n        backgroundColor: 'rgba(0, 0, 0, 0)',\n        dataset: {\n          dimensions: ['date', 'profit'],\n          source: cumulativeData.value,\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'line',\n            label: {\n              backgroundColor: '#6a7985',\n            },\n          },\n        },\n        legend: {\n          data: [CHART_PROFIT],\n          right: '5%',\n        },\n        useUTC: false,\n        xAxis: {\n          type: 'time',\n        },\n        yAxis: [\n          {\n            type: 'value',\n            name: CHART_PROFIT,\n            splitLine: {\n              show: false,\n            },\n            nameRotate: 90,\n            nameLocation: 'middle',\n            nameGap: 40,\n          },\n        ],\n        grid: {\n          bottom: 80,\n        },\n        dataZoom: [\n          {\n            type: 'inside',\n            // xAxisIndex: [0],\n            start: 0,\n            end: 100,\n          },\n          {\n            show: true,\n            // xAxisIndex: [0],\n            type: 'slider',\n            bottom: 10,\n            start: 0,\n            end: 100,\n          },\n        ],\n        series: [\n          {\n            type: 'line',\n            name: CHART_PROFIT,\n            animation: true,\n            step: 'end',\n            lineStyle: {\n              color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\n            },\n            itemStyle: {\n              color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\n            },\n            // symbol: 'none',\n          },\n        ],\n      };\n      // TODO: maybe have profit lines per bot?\n      // this.botList.forEach((botId: string) => {\n      //   console.log('bot', botId);\n      //   chartOptionsLoc.series.push({\n      //     type: 'line',\n      //     name: botId,\n      //     animation: true,\n      //     step: 'end',\n      //     lineStyle: {\n      //       color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\n      //     },\n      //     itemStylesettingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\n      //     },\n      //     // symbol: 'none',\n      //   });\n      // });\n      return chartOptionsLoc;\n    });\n\n    return { settingsStore, cumulativeData, chartOptions };\n  },\n});\n</script>\n\n<style scoped>\n.echarts {\n  width: 100%;\n  height: 100%;\n  min-height: 150px;\n}\n</style>\n","\n<v-chart v-if=\"trades\" :option=\"chartOptions\" autoresize :theme=\"settingsStore.chartTheme\" />\n","<template>\n  <v-chart\n    v-if=\"trades.length > 0\"\n    :option=\"chartOptions\"\n    autoresize\n    :theme=\"settingsStore.chartTheme\"\n  />\n</template>\n\n<script lang=\"ts\">\nimport ECharts from 'vue-echarts';\nimport { EChartsOption } from 'echarts';\n\nimport { use } from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { LineChart, BarChart } from 'echarts/charts';\nimport {\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n  VisualMapComponent,\n  VisualMapPiecewiseComponent,\n} from 'echarts/components';\n\nimport { ClosedTrade } from '@/types';\nimport { useSettingsStore } from '@/stores/settings';\nimport { defineComponent, computed } from '@vue/composition-api';\nimport { timestampms } from '@/shared/formatters';\n\nuse([\n  BarChart,\n  LineChart,\n\n  CanvasRenderer,\n\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n  VisualMapComponent,\n  VisualMapPiecewiseComponent,\n]);\n\n// Define Column labels here to avoid typos\nconst CHART_PROFIT = 'Profit %';\nconst CHART_COLOR = '#9be0a8';\n\nexport default defineComponent({\n  name: 'TradesLogChart',\n  components: {\n    'v-chart': ECharts,\n  },\n  props: {\n    trades: { required: true, type: Array as () => ClosedTrade[] },\n    showTitle: { default: true, type: Boolean },\n  },\n  setup(props) {\n    const settingsStore = useSettingsStore();\n    const chartData = computed(() => {\n      const res: (number | string)[][] = [];\n      const sortedTrades = props.trades\n        .slice(0)\n        .sort((a, b) => (a.close_timestamp > b.close_timestamp ? 1 : -1));\n      for (let i = 0, len = sortedTrades.length; i < len; i += 1) {\n        const trade = sortedTrades[i];\n        const entry = [\n          i,\n          (trade.profit_ratio * 100).toFixed(2),\n          trade.pair,\n          trade.botName,\n          timestampms(trade.close_timestamp),\n          trade.is_short === undefined || !trade.is_short ? 'Long' : 'Short',\n        ];\n        res.push(entry);\n      }\n      return res;\n    });\n\n    const chartOptions = computed((): EChartsOption => {\n      // const { chartData } = this;\n      // Show a maximum of 50 trades by default - allowing to zoom out further.\n      const datazoomStart =\n        chartData.value.length > 0 ? (1 - 50 / chartData.value.length) * 100 : 100;\n      return {\n        title: {\n          text: 'Trades log',\n          show: props.showTitle,\n        },\n        backgroundColor: 'rgba(0, 0, 0, 0)',\n        dataset: {\n          dimensions: ['date', 'profit'],\n          source: chartData.value,\n        },\n        tooltip: {\n          trigger: 'axis',\n          formatter: (params) => {\n            const botName = params[0].data[3] ? ` | ${params[0].data[3]}` : '';\n            return `${params[0].data[2]} | ${params[0].data[5]} ${botName}<br>${params[0].data[4]}<br>Profit ${params[0].data[1]} %`;\n          },\n          axisPointer: {\n            type: 'line',\n            label: {\n              backgroundColor: '#6a7985',\n            },\n          },\n        },\n        xAxis: {\n          type: 'value',\n          show: false,\n        },\n        yAxis: [\n          {\n            type: 'value',\n            name: CHART_PROFIT,\n            splitLine: {\n              show: false,\n            },\n            nameRotate: 90,\n            nameLocation: 'middle',\n            nameGap: 30,\n          },\n        ],\n        grid: {\n          bottom: 80,\n        },\n        dataZoom: [\n          {\n            type: 'inside',\n            start: datazoomStart,\n            end: 100,\n          },\n          {\n            show: true,\n            type: 'slider',\n            bottom: 10,\n            start: datazoomStart,\n            end: 100,\n          },\n        ],\n        visualMap: [\n          {\n            show: true,\n            seriesIndex: 0,\n            pieces: [\n              {\n                max: 0.0,\n                color: '#f84960',\n              },\n              {\n                min: 0.0,\n                color: '#2ed191',\n              },\n            ],\n          },\n        ],\n        series: [\n          {\n            type: 'bar',\n            name: CHART_PROFIT,\n            barGap: '0%',\n            barCategoryGap: '0%',\n            animation: false,\n            label: {\n              show: true,\n              position: 'top',\n              rotate: 90,\n              offset: [7.5, 7.5],\n              formatter: '{@[1]} %',\n              color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : '#3c3c3c',\n            },\n            encode: {\n              x: 0,\n              y: 1,\n            },\n\n            itemStyle: {\n              color: CHART_COLOR,\n            },\n          },\n        ],\n      };\n    });\n\n    return { settingsStore, chartData, chartOptions };\n  },\n});\n</script>\n\n<style scoped>\n.echarts {\n  width: 100%;\n  height: 100%;\n  min-height: 150px;\n}\n</style>\n","\n<v-chart\n  v-if=\"trades.length > 0\"\n  :option=\"chartOptions\"\n  autoresize\n  :theme=\"settingsStore.chartTheme\"\n/>\n"],"names":["BarChart","LineChart","CanvasRenderer","DatasetComponent","DataZoomComponent","LegendComponent","TitleComponent","TooltipComponent","CHART_PROFIT","ECharts","render","staticRenderFns","VisualMapComponent","VisualMapPiecewiseComponent"],"mappings":"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"}